{"name":"Markdown","tagline":"markdown test","body":"## Jump to Section\r\n\r\n* [Python注意点](#python%E6%B3%A8%E6%84%8F%E7%82%B9)\r\n* [Python文件类型](#python%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B)\r\n* [Python变量](#python%E5%8F%98%E9%87%8F)\r\n* [Python运算符](#python%E8%BF%90%E7%AE%97%E7%AC%A6)\r\n* [Python数据类型](#python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B)\r\n* [Python序列](#python%E5%BA%8F%E5%88%97)\r\n* [Python流程控制](#python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6)\r\n* []()\r\n* []()\r\n\r\n## Python注意点\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n- `Python`中，表示方法比较特殊，是用相同缩进的一条或多条语句来表示的，建议使用4个空格作为缩进\r\n\r\n\r\n## Python文件类型\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n- 源代码\r\n  - Python源代码的文件以`*.py`为扩展名，由`python`命令解释执行，不需要编译\r\n   <pre>\r\n    $ cat hello.py\r\n    print 'hello world'\r\n    $ python hello.py\r\n    hello world\r\n   </pre>\r\n  - 在`linux`中文件头部分添加如下代码，并附加可执行权限，就能够直接执行\r\n   <pre>\r\n    $ cat hello.py\r\n    #!/c/Python27/python\r\n    print 'hello world'\r\n    $ chmod +x hello.py\r\n    $ hello.py\r\n    hello world\r\n   </pre>\r\n- 字节代码\r\n  - Python源文件经编译后生成的扩展名为`*.pyc`的文件，需要用`python`命令执行\r\n  - 编译方法\r\n   <pre>\r\n    $ ls\r\n    hello.py  world.py\r\n    $ cat world.py\r\n    import py_compile\r\n    py_compile.compile(\"hello.py\")\r\n    $ python world.py\r\n    $ ls\r\n    hello.py  hello.pyc  world.py\r\n    $ python hello.pyc\r\n    hello world\r\n   </pre>\r\n- 优化代码\r\n  - 经过优化后的源文件，扩展名为`*.pyo`，需要用`python`命令执行\r\n  - 执行方法，注意参数是大写的`O`\r\n   <pre>\r\n    $ python -O -m py_compile hello.py\r\n    $ ls\r\n    hello.py  hello.pyo\r\n    $ python hello.pyo\r\n    hello world\r\n   </pre>\r\n\r\n## Python变量\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n**变量是计算机内存中的一块区域，变量可以存储规定范围内的值，而且值可以改变。**\r\n\r\n- 变量的命名\r\n  - 变量名由字母、数字、下划线组成\r\n  - 不能以数字开头\r\n  - 不可以使用关键字\r\n- 变量的赋值\r\n  - 变量声明和使用\r\n  ```python\r\n  >>> a=1\r\n  >>> a\r\n  1\r\n  >>> print a\r\n  1\r\n  >>> b=10\r\n  >>> a*b+3\r\n  13\r\n  ```\r\n  - 查看变量内存空间地址`id(VarName)`，同一内存空间地址可以被多个变量所使用\r\n  ```python\r\n  >>> id(a)\r\n  5090592\r\n  >>> id(b)\r\n  5090484\r\n  >>> c=10\r\n  >>> id(c)\r\n  5090484\r\n  ```\r\n\r\n## Python运算符\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n- 算术运算符\r\n  - 加法：`+`\r\n  ```python\r\n  >>> 2+3\r\n  5\r\n  ```\r\n  - 减法：`-`\r\n  ```python\r\n  >>> 5-4\r\n  1\r\n  ```\r\n  - 乘法：`*`\r\n  ```python\r\n  >>> 3*2\r\n  6\r\n  ```\r\n  - 实数除法：`/`\r\n  ```python\r\n  >>> 3/2\r\n  1\r\n  >>> 3.0/2\r\n  1.5\r\n  ```\r\n  - 整数除法：`//`\r\n  ```python\r\n  >>> 3//2\r\n  1\r\n  >>> 3.0//2\r\n  1.0\r\n  >>> 3.2//2\r\n  1.0\r\n  ```\r\n  - 求余数：`%`\r\n  ```python\r\n  >>> 10%3\r\n  1\r\n  ```\r\n  - 幂运算：`**`\r\n  ```python\r\n  >>> 2**3\r\n  8\r\n  ```\r\n- 关系运算符，返回`True/False`\r\n  - 小于：`1<2`\r\n  - 大于：`3>2`\r\n  - 小于等于：`1<=1`\r\n  - 大于等于：`2>=2`\r\n  - 不等于：`1!=2`\r\n  - 等于：`2==2`\r\n- 逻辑运算符，返回`True/False`\r\n  - 逻辑与：`3>2 and 2<3`\r\n  - 逻辑或：`1>2 or 3>2`\r\n  - 逻辑非：`not 1>2`\r\n- 赋值运算符，先用左边的变量和右边的表达式计算，再赋值给左边的变量\r\n  - 等于：`=`\r\n  ```python\r\n  >>> a=22\r\n  >>> b='xyz'\r\n  >>> a\r\n  22\r\n  >>> b\r\n  'xyz'\r\n  ```\r\n  - 加等于：`+=`\r\n  ```python\r\n  >>> a=22\r\n  >>> a+=5\r\n  >>> a\r\n  27\r\n  ```\r\n  - 减等于：`-=`\r\n  ```python\r\n  >>> a=27\r\n  >>> a-=4\r\n  >>> a\r\n  23\r\n  ```\r\n  - 乘等于：`*=`\r\n  ```python\r\n  >>> a=5\r\n  >>> a*=4\r\n  >>> a\r\n  20\r\n  ```\r\n  - 除等于：`/=`\r\n  ```python\r\n  >>> a=20\r\n  >>> a/=4\r\n  >>> a\r\n    5\r\n  ```\r\n  - 求余等于：`%=`\r\n  ```python\r\n  >>> a=5\r\n  >>> a%=3\r\n  >>> a\r\n  2\r\n  ```\r\n  - 算术运算符优先级由低到高顺序\r\n   <pre>\r\n    Lambda\r\n    逻辑或：or\r\n    逻辑与：and\r\n    逻辑非：not\r\n    范围：in, not in\r\n    同一性测试：is, is not\r\n    比较：<, <=, >, >=, !=, ==\r\n    按位或：|\r\n    按位异或：^\r\n    移位：<<, >>\r\n    加法与减法：+, -\r\n    乘法、除法与取余：`*, /, %`\r\n    正负号：+X, -X\r\n    按位翻转：~X\r\n    幂运算：**\r\n   </pre>\r\n\r\n## Python数据类型\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n- 数字类型\r\n  - 整型：`int`，范围`-2,147,483,648~2,147,483,647`\r\n  ```python\r\n  >>> num=21435435\r\n  >>> type(num)\r\n  <type 'int'>\r\n  ```\r\n  - 长整型：`long`，范围可以是任意大的整数均可以储存，也可以在普通整数后加`L`或`l`强制声明。\r\n  ```python\r\n  >>> num=9999999999999999999\r\n  >>> type(num)\r\n  <type 'long'>\r\n  >>> num=123L\r\n  >>> type(num)\r\n  <type 'long'>\r\n  ```\r\n  - 浮点型：`float`，加上`.`声明即可\r\n  ```python\r\n  >>> num=1.0\r\n  >>> type(num)\r\n  <type 'float'>\r\n  ```\r\n  - 复数型：`complex`，加上`j`声明即可\r\n  ```python\r\n  >>> num=3.14j\r\n  >>> type(num)\r\n  <type 'complex'>\r\n  >>> num\r\n  3.14j\r\n  ```\r\n- 字符串：`String`\r\n  - 一旦生成，不可变\r\n  - 使用引号定义的一组集合，可以包含数字、字母、符号（非特殊系统符号）\r\n  - 必要时字符串中可以添加转义符号：`\\`, `\\n`\r\n  ```python\r\n  >>> str='string'\r\n  >>> str=\"string\"\r\n  >>> str=\"\"\"string\"\"\"\r\n  >>> type(str)\r\n  <type 'str'>\r\n  >>> print str\r\n  string\r\n  >>> str='let\\'s go'\r\n  >>> print str\r\n  let's go\r\n  ```\r\n  - 三重引号（docstring）通常用来制作字符串\r\n  ```python\r\n  >>> str=\"\"\"jay:\r\n  ...   How are you?\r\n  ...        Gooodbye!\r\n  ... \"\"\"\r\n  >>> str\r\n  'jay:\\n  How are you?\\n       Gooodbye!\\n'\r\n  >>> print str\r\n  jay:\r\n    How are you?\r\n         Gooodbye!\r\n\r\n  ```\r\n  - 操作字符串：索引、连接、截取\r\n  ```python\r\n  >>> str=\"12345\"\r\n  >>> str[0] #索引位置从0开始\r\n  '1'\r\n  >>> str[2]+str[0] #使用`+`连接字符串\r\n  '31'\r\n  >>> str[1:4] #从索引1截取到索引4-1的字符，默认从左向右截取\r\n  '234'\r\n  >>> str[:4] #从索引0开始截取到索引4-1的字符\r\n  '1234'\r\n  >>> str[4:] #从索引4开始截取到末尾\r\n  '5'\r\n  >>> str[::1] #从索引0开始每隔1个字符进行截取\r\n  '12345'\r\n  >>> str[::2] #从索引0开始每隔2个字符进行截取\r\n  '135'\r\n  >>> str[::3] #从索引0开始每隔3个字符进行截取\r\n  '14'\r\n  >>> str[-1] #从右向左索引位置即-1, -2, -3, ...\r\n  '5'\r\n  >>> str[-4:-1]\r\n  '234'\r\n  >>> str[4::-1] #使用-1从右向左截取，即字符串反转\r\n  '54321'\r\n  >>> str[3::-1]\r\n  '4321'\r\n  ```\r\n- 元组（类似于`Java`中的数组）：`tuple`\r\n  - 一旦生成，不可以改变\r\n  - 固定长度，支持嵌套\r\n  - 通过偏移读取\r\n  ```python\r\n  >>> empty=() #空元组\r\n  >>>\r\n  >>> singleton=(2,) #单个元素的元组\r\n  >>> singleton2=(2) #这是整数\r\n  >>> type(singleton)\r\n  <type 'tuple'>\r\n  >>> type(singleton2)\r\n  <type 'int'>\r\n  >>>\r\n  >>> a=('x','y','z') #一般的元组\r\n  >>> b=('w',a,1) #嵌套元组\r\n  >>> print b\r\n  ('w', ('x', 'y', 'z'), 1)\r\n  >>> b[2] #取元组中的元素\r\n  1\r\n  >>> b[1]\r\n  ('x', 'y', 'z')\r\n  >>> b[1][1] #取元组中的元素\r\n  'y'\r\n  >>>\r\n  >>> c1,c2,c3=b #同时定义三个变量，并赋值\r\n  >>> print c1\r\n  w\r\n  >>> c2\r\n  ('x', 'y', 'z')\r\n  >>> c3\r\n  1\r\n  ```\r\n- 字典：`dict`\r\n  - [jump to api doc](https://docs.python.org/2/library/stdtypes.html#mapping-types-dict)\r\n  - 字典是`Python`中唯一的映射类型（哈希表）\r\n  - 字典对象是可变的，但字典的键必须使用不可变对象，并且一个字典中可以使用不同类型的键值\r\n  - 定义字典的几种方式\r\n  ```python\r\n  >>> a = dict(one=1, two=2, three=3)\r\n  >>> b = {'one': 1, 'two': 2, 'three': 3}\r\n  >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))\r\n  >>> d = dict([('two', 2), ('one', 1), ('three', 3)])\r\n  >>> e = dict({'three': 3, 'one': 1, 'two': 2})\r\n  >>> a == b == c == d == e\r\n  True\r\n  >>> type(a)\r\n  <type 'dict'>\r\n  ```\r\n  - `d.items()` 返回所有的键值对\r\n  ```python\r\n  >>> a.items()\r\n  [('three', 3), ('two', 2), ('one', 1)]\r\n  ```\r\n  - `d.keys()` 返回键列表\r\n  ```python\r\n  >>> a.keys()\r\n  ['three', 'two', 'one']\r\n  ```\r\n  - `d.values()` 返回值列表\r\n  ```python\r\n  >>> a.values()\r\n  [3, 2, 1]\r\n  ```\r\n  - `d[key]` 获取`key`对应的`value`\r\n  ```python\r\n  >>> b[\"one\"]\r\n  1\r\n  ```\r\n  - `get(key[, default])` 获取`key`的`value`，如果没有`key`，则返回`default`；如果没有`default`，则没有值也不会报错\r\n  ```python\r\n  >>> a.get(\"one\")\r\n  1\r\n  >>> a.get(\"one1\",222)\r\n  2\r\n  ```\r\n  - `d[key] = value` 设置`key`的`value`或者增加一个`item`\r\n  ```python\r\n  >>> a['one']=111\r\n  >>> a['one']\r\n  111\r\n  ```\r\n  - `del d[key]或者del(d[key])` 删除`key`\r\n  ```python\r\n  >>> del a[\"one\"]\r\n  ```\r\n  - `key in d` 是否存在`key`\r\n  ```python\r\n  >>> \"one\" in a\r\n  False\r\n  ```\r\n  - d.has_key(key) 是否存在`key`，建议使用`key in d`代替\r\n  ```python\r\n  >>> a.has_key(\"one\")\r\n  False\r\n  ```\r\n  - `key not in d`是否不存在`key`\r\n  ```python\r\n  >>> \"one\" not in a\r\n  True\r\n  ```\r\n  - `d.clar()` 移除所有的`items`\r\n  ```python\r\n  >>> a.clear()\r\n  >>> a\r\n  {}\r\n  ```\r\n  - `d.copy()` 复制字典\r\n  ```python\r\n  >>> a=b.copy()\r\n  >>> a\r\n  {'one': 1, 'three': 3, 'two': 2}\r\n  ```\r\n  - `pop(key[, default])` 删除`key`，并返回`value`；如果没有`key`，则返回`default`，如果`default`没有，则会报错\r\n  ```python\r\n  >>> a.pop(\"one\",111)\r\n  1\r\n  >>> a.pop(\"one\",111)\r\n  111\r\n  ```\r\n\r\n## Python序列\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n**列表、元组和字符串都是序列**\r\n\r\n- 序列的两个主要特点是索引操作符和切片符\r\n  - 索引操作符可以从序列中抓取一个特定范围的值\r\n  - 切片操作符可以截取序列的一部分元素\r\n\r\n- 序列的基本操作\r\n  - 求序列长度：`len()`\r\n  ```python\r\n  >>> len('abc')\r\n  3\r\n  ```\r\n  - 连接2个序列：`+`\r\n  ```python\r\n  >>> 'abc'+'123'\r\n  'abc123'\r\n  ```\r\n  - 重复序列元素：`*`\r\n  ```python\r\n  >>> '#'*3\r\n  '###'\r\n  ```\r\n  - 判断元素是否在序列中：`in`\r\n  ```python\r\n  >>> 'c' in 'abc'\r\n  'True'\r\n  >>> 'd' in 'abc'\r\n  'False'\r\n  ```\r\n  - 取最大/小值：`max()`, `min()`，不能单独操作数字\r\n  ```python\r\n  >>> max('abc')\r\n  'c'\r\n  >>> max(12345679,1234)\r\n  12345679\r\n  >>> max('189')\r\n  '9'\r\n  >>> min(11,22,33)\r\n  11\r\n  >>> min('abc')\r\n  'a'\r\n  ```\r\n\r\n## Python流程控制\r\n\r\n[[Back To Top]](#jump-to-section)\r\n\r\n- 逻辑运算符：`and/or/not`\r\n  - 类似于`Java`中的`and/or/!`\r\n- `if/elif/else`\r\n  - [jump to api doc](https://docs.python.org/2/reference/compound_stmts.html#the-if-statement)\r\n  - 语法格式\r\n  ```python\r\n  if expression:\r\n      suite\r\n  elsif expression:\r\n      suite\r\n  else\r\n      suite\r\n  ```\r\n  - 示例\r\n  ```python\r\n  if 1 > 2 and 2 > 3:\r\n      print \"hello\"\r\n      print \"world\"\r\n  elif 2 > 3 or 1 > 2:\r\n      print \"2 > 3\"\r\n  elif not 3 > 2:\r\n      print \"3 > 2\"\r\n  else:\r\n      print \"else\"\r\n  ```\r\n- `for`\r\n  - [jump to api doc](https://docs.python.org/2/reference/compound_stmts.html#the-for-statement)\r\n  - 语法格式\r\n  ```python\r\n  for target_list in expression_list :\r\n    suite\r\n  else\r\n    suite\r\n  ```\r\n  - 示例\r\n  ```python\r\n  for letter in 'Python':\r\n    print 'Current Letter:', letter\r\n  fruits=['banana','apple','mango']\r\n  for fruit in fruits:\r\n    print 'Current fruit:', fruit\r\n  ```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}